const KnowledgeBaseService = require('./knowledgeBaseService');

class EnhancedSimpleAssistantService {
  constructor() {
    this.knowledgeBase = new KnowledgeBaseService();
    this.isInitialized = false;
  }

  async initialize() {
    try {
      console.log('üöÄ Initialisation du service assistant am√©lior√©...');
      
      const kbInitialized = await this.knowledgeBase.initialize();
      if (!kbInitialized) {
        console.error('‚ùå √âchec initialisation base de connaissances');
        return false;
      }

      this.isInitialized = true;
      console.log('‚úÖ Service assistant am√©lior√© initialis√©');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur initialisation service assistant:', error);
      return false;
    }
  }

  /**
   * Traite une question en utilisant la base de connaissances
   * @param {string} question - Question pos√©e
   * @param {string} userRole - R√¥le de l'utilisateur
   * @param {string} enterpriseId - ID de l'entreprise (optionnel)
   * @returns {Object} R√©ponse enrichie
   */
  async processQuestion(question, userRole = 'admin', enterpriseId = null) {
    const startTime = Date.now();
    const questionId = `kb_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

    try {
      console.log(`üß† [${questionId}] === TRAITEMENT QUESTION BASE DE CONNAISSANCES ===`);
      console.log(`üß† [${questionId}] Question: "${question}"`);
      console.log(`üß† [${questionId}] UserRole: ${userRole}`);

      if (!this.isInitialized) {
        console.log(`üîÑ [${questionId}] Initialisation en cours...`);
        await this.initialize();
        if (!this.isInitialized) {
          console.log(`‚ùå [${questionId}] √âchec initialisation`);
          return {
            success: false,
            error: 'Service non disponible',
            responseTime: Date.now() - startTime
          };
        }
      }

      // Rechercher dans la base de connaissances
      console.log(`üîç [${questionId}] Recherche dans la base de connaissances...`);
      const knowledgeMatch = await this.knowledgeBase.searchKnowledge(question);
      
      if (knowledgeMatch && knowledgeMatch.score > 0.3) {
        console.log(`‚úÖ [${questionId}] Correspondance trouv√©e (score: ${knowledgeMatch.score.toFixed(2)})`);
        
        const enrichedResponse = this.knowledgeBase.enrichResponse(knowledgeMatch, question);
        
        const responseTime = Date.now() - startTime;
        console.log(`üì§ [${questionId}] R√©ponse g√©n√©r√©e en ${responseTime}ms`);
        
        return {
          success: true,
          question: question,
          answer: enrichedResponse.answer,
          approach: 'knowledge_base',
          confidence: enrichedResponse.confidence,
          responseTime: responseTime,
          service: 'enhanced',
          metadata: {
            category: enrichedResponse.category,
            source: 'knowledge_base',
            score: knowledgeMatch.score,
            hasDetails: !!enrichedResponse.details,
            hasSteps: !!enrichedResponse.steps,
            quickActions: enrichedResponse.quickActions
          },
          timestamp: new Date()
        };
      }

      // Si aucune correspondance dans la base de connaissances, utiliser les r√©ponses de base
      console.log(`üîÑ [${questionId}] Aucune correspondance KB, utilisation des r√©ponses de base`);
      const fallbackResponse = this.getFallbackResponse(question);
      
      const responseTime = Date.now() - startTime;
      console.log(`üì§ [${questionId}] R√©ponse fallback g√©n√©r√©e en ${responseTime}ms`);
      
      return {
        success: true,
        question: question,
        answer: fallbackResponse,
        approach: 'fallback',
        confidence: 0.6,
        responseTime: responseTime,
        service: 'enhanced',
        metadata: {
          source: 'fallback_responses',
          note: 'R√©ponse g√©n√©rique - base de connaissances en cours d\'enrichissement'
        },
        timestamp: new Date()
      };

    } catch (error) {
      console.error(`‚ùå [${questionId}] Erreur traitement question KB:`, {
        message: error.message,
        stack: error.stack?.split('\n').slice(0, 5)
      });
      
      return {
        success: false,
        error: 'Erreur lors du traitement de votre question',
        approach: 'error',
        responseTime: Date.now() - startTime,
        service: 'enhanced',
        timestamp: new Date()
      };
    }
  }

  /**
   * R√©ponses de fallback pour les questions non trouv√©es dans la KB
   * @param {string} question - Question pos√©e
   * @returns {string} R√©ponse de fallback
   */
  getFallbackResponse(question) {
    const questionLower = question.toLowerCase();
    
    if (questionLower.includes('bonjour') || questionLower.includes('salut')) {
      return 'üëã **Bonjour !** Je suis votre assistant IA administrateur.\n\nJe peux vous aider avec la gestion des utilisateurs, entreprises, rapports, configuration syst√®me et s√©curit√©.\n\n**Posez-moi une question sp√©cifique pour obtenir des informations d√©taill√©es !**';
    } else if (questionLower.includes('aide') || questionLower.includes('help')) {
      return 'üÜò **Centre d\'Aide**\n\nJe peux vous aider avec :\n‚Ä¢ **Statistiques** : Utilisateurs, entreprises, performance\n‚Ä¢ **Gestion** : Cr√©ation, modification, validation\n‚Ä¢ **Rapports** : G√©n√©ration et analyses\n‚Ä¢ **Configuration** : Param√®tres syst√®me\n‚Ä¢ **S√©curit√©** : Audit et monitoring\n\n**Exemples de questions :**\n‚Ä¢ "Combien d\'utilisateurs sont connect√©s ?"\n‚Ä¢ "Comment cr√©er un utilisateur ?"\n‚Ä¢ "Quelles entreprises sont en attente ?"';
    } else if (questionLower.includes('merci')) {
      return 'üòä **Je vous en prie !**\n\nN\'h√©sitez pas si vous avez d\'autres questions. Je suis l√† pour vous aider !';
    } else {
      return `ü§î **Question re√ßue :** "${question}"\n\nJe comprends votre demande. Voici ce que je peux vous aider √† faire :\n\nüìä **Statistiques & Donn√©es**\n‚Ä¢ Nombre d\'utilisateurs et entreprises\n‚Ä¢ M√©triques de performance\n‚Ä¢ Analyses de tendances\n\nüë• **Gestion**\n‚Ä¢ Utilisateurs et comptes\n‚Ä¢ Entreprises et validations\n‚Ä¢ R√¥les et permissions\n\nüìã **Rapports**\n‚Ä¢ G√©n√©ration de rapports\n‚Ä¢ Analyses d√©taill√©es\n‚Ä¢ Exports de donn√©es\n\n‚öôÔ∏è **Syst√®me**\n‚Ä¢ Configuration\n‚Ä¢ Monitoring\n‚Ä¢ S√©curit√©\n\n**Pour une r√©ponse plus pr√©cise, utilisez des mots-cl√©s sp√©cifiques !**`;
    }
  }

  /**
   * Obtient les statistiques du service
   * @returns {Object} Statistiques
   */
  getStats() {
    return {
      isInitialized: this.isInitialized,
      knowledgeBase: this.knowledgeBase.getStats(),
      service: 'enhanced_simple_assistant',
      version: '1.0.0'
    };
  }

  /**
   * Recharge la base de connaissances
   * @returns {boolean} Succ√®s du rechargement
   */
  async reloadKnowledge() {
    try {
      console.log('üîÑ Rechargement de la base de connaissances...');
      const success = await this.knowledgeBase.reload();
      console.log(success ? '‚úÖ Base de connaissances recharg√©e' : '‚ùå √âchec rechargement');
      return success;
    } catch (error) {
      console.error('‚ùå Erreur rechargement KB:', error);
      return false;
    }
  }

  /**
   * Recherche dans la base de connaissances
   * @param {string} query - Requ√™te de recherche
   * @param {string} category - Cat√©gorie sp√©cifique (optionnel)
   * @returns {Object} R√©sultats de recherche
   */
  async searchKnowledge(query, category = null) {
    if (!this.isInitialized) {
      await this.initialize();
    }

    if (!this.isInitialized) {
      return null;
    }

    return await this.knowledgeBase.searchKnowledge(query, category);
  }
}

module.exports = EnhancedSimpleAssistantService;
