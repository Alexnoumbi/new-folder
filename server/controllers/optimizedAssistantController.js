/**
 * Contr√¥leur optimis√© pour les assistants IA
 * Version am√©lior√©e avec cache, monitoring et performances optimis√©es
 */

const OptimizedHybridQAService = require('../utils/optimizedHybridQAService');
const multer = require('multer');
const path = require('path');
const compression = require('compression');
const NodeCache = require('node-cache');

class OptimizedAssistantController {
    constructor() {
        this.qaService = new OptimizedHybridQAService();
        this.isInitialized = false;
        
        // Cache pour les r√©ponses fr√©quentes
        this.frequentResponsesCache = new NodeCache({ 
            stdTTL: 600, // 10 minutes
            checkperiod: 120 // 2 minutes
        });
        
        // Configuration multer optimis√©e
        this.upload = multer({
            dest: 'uploads/assistant/',
            fileFilter: (req, file, cb) => {
                const allowedTypes = /jpeg|jpg|png|gif|bmp|tiff|pdf/;
                const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
                const mimetype = allowedTypes.test(file.mimetype) || file.mimetype === 'application/pdf';
                
                if (mimetype && extname) {
                    return cb(null, true);
                } else {
                    cb(new Error('Seules les images et PDF sont autoris√©s'));
                }
            },
            limits: { fileSize: 15 * 1024 * 1024 } // 15MB max
        });

        // Middleware de compression
        this.compressionMiddleware = compression({
            filter: (req, res) => {
                if (req.headers['x-no-compression']) {
                    return false;
                }
                return compression.filter(req, res);
            }
        });

        // Initialisation des patterns de questions fr√©quentes
        this.initializeFrequentPatterns();
        
        // Initialisation automatique du service
        this.initializeServices();
    }

    /**
     * Initialisation des services
     */
    async initializeServices() {
        if (this.isInitialized) return;
        
        try {
            console.log('üîÑ Initialisation du contr√¥leur assistant...');
            await this.qaService.initialize();
            this.isInitialized = true;
            console.log('‚úÖ Contr√¥leur assistant initialis√©');
        } catch (error) {
            console.error('‚ùå Erreur initialisation contr√¥leur:', error);
            this.isInitialized = false;
        }
    }

    /**
     * Patterns pour les questions fr√©quentes
     */
    initializeFrequentPatterns() {
        this.frequentPatterns = {
            greeting: {
                patterns: [/bonjour/i, /salut/i, /hello/i, /bonsoir/i],
                response: 'Bonjour ! Je suis votre assistant IA. Comment puis-je vous aider aujourd\'hui ?',
                confidence: 1.0
            },
            thanks: {
                patterns: [/merci/i, /thanks/i, /thank you/i],
                response: 'Je vous en prie ! N\'h√©sitez pas si vous avez d\'autres questions.',
                confidence: 1.0
            },
            goodbye: {
                patterns: [/au revoir/i, /bye/i, /goodbye/i, /√† bient√¥t/i],
                response: 'Au revoir ! N\'h√©sitez pas √† revenir si vous avez besoin d\'aide.',
                confidence: 1.0
            }
        };
    }

    /**
     * Traitement optimis√© des questions avec r√©ponses instantan√©es
     */
    async askQuestion(req, res) {
        const startTime = Date.now();
        const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

        try {
            console.log(`üöÄ [${requestId}] === D√âBUT TRAITEMENT QUESTION ===`);
            console.log(`üöÄ [${requestId}] Headers:`, {
                'user-agent': req.headers['user-agent'],
                'content-type': req.headers['content-type'],
                'authorization': req.headers['authorization'] ? 'pr√©sent' : 'absent'
            });
            console.log(`üöÄ [${requestId}] User:`, {
                id: req.user?.id,
                email: req.user?.email,
                typeCompte: req.user?.typeCompte,
                entrepriseId: req.user?.entrepriseId
            });
            console.log(`üöÄ [${requestId}] Body:`, req.body);

            // V√©rification de l'initialisation
            console.log(`üîç [${requestId}] V√©rification initialisation:`, this.isInitialized);
            if (!this.isInitialized) {
                console.log(`üîÑ [${requestId}] Initialisation en cours...`);
                await this.initializeServices();
                console.log(`‚úÖ [${requestId}] Initialisation termin√©e:`, this.isInitialized);
                if (!this.isInitialized) {
                    console.log(`‚ùå [${requestId}] √âchec initialisation`);
                    return res.status(503).json({ 
                        success: false,
                        error: 'Service assistant non disponible' 
                    });
                }
            }

            const { question, enterpriseId } = req.body;
            const userRole = req.user?.typeCompte === 'admin' ? 'admin' : 'enterprise';
            
            console.log(`üìù [${requestId}] Donn√©es extraites:`, {
                question: question,
                enterpriseId: enterpriseId,
                userRole: userRole,
                extractedEnterpriseId: enterpriseId || req.user?.entrepriseId || req.user?.id
            });

            // Validation des entr√©es
            if (!question?.trim()) {
                console.log(`‚ùå [${requestId}] Question vide ou invalide`);
                return res.status(400).json({ 
                    success: false,
                    error: 'Question requise' 
                });
            }

            if (!req.user) {
                console.log(`‚ùå [${requestId}] Utilisateur non authentifi√©`);
                return res.status(401).json({ 
                    success: false,
                    error: 'Authentification requise' 
                });
            }

            console.log(`üí≠ [${requestId}] Question: "${question}" (Role: ${userRole})`);

            // V√©rification des r√©ponses fr√©quentes instantan√©es
            console.log(`üîç [${requestId}] V√©rification patterns fr√©quents...`);
            const quickResponse = this.checkFrequentPatterns(question);
            if (quickResponse) {
                console.log(`‚ö° [${requestId}] R√©ponse instantan√©e trouv√©e:`, quickResponse);
                return res.json({
                    success: true,
                    question: question,
                    answer: quickResponse.response,
                    approach: 'instant',
                    confidence: quickResponse.confidence,
                    responseTime: Date.now() - startTime,
                    service: 'optimized',
                    timestamp: new Date()
                });
            }

            // Traitement avec le service optimis√©
            console.log(`ü§ñ [${requestId}] Appel au service Q&A...`);
            const response = await this.qaService.processQuestion(
                question, 
                userRole, 
                enterpriseId || req.user?.entrepriseId || req.user?.id
            );

            console.log(`üìä [${requestId}] R√©ponse du service:`, {
                success: response.success,
                hasResponse: !!response.response,
                approach: response.approach,
                confidence: response.confidence,
                responseTime: response.responseTime,
                error: response.error
            });

            if (!response.success) {
                console.log(`‚ùå [${requestId}] √âchec du service Q&A:`, response.error);
                return res.status(500).json({ 
                    success: false,
                    error: response.error || 'Erreur lors du traitement'
                });
            }

            // Enrichissement de la r√©ponse
            console.log(`‚ú® [${requestId}] Enrichissement de la r√©ponse...`);
            const enrichedResponse = {
                success: true,
                question: question,
                answer: response.response,
                approach: response.approach,
                confidence: response.confidence,
                responseTime: response.responseTime,
                service: 'optimized',
                metadata: {
                    pattern: response.pattern,
                    matchedQuestion: response.matchedQuestion,
                    category: response.category,
                    warning: response.warning,
                    fromCache: response.fromCache,
                    serviceMode: response.service
                },
                timestamp: new Date()
            };

            // Log des performances
            console.log(`‚úÖ [${requestId}] R√©ponse g√©n√©r√©e en ${response.responseTime}ms (${response.approach})`);
            console.log(`üì§ [${requestId}] Envoi de la r√©ponse au client`);

            res.json(enrichedResponse);

        } catch (error) {
            console.error(`‚ùå [${requestId}] Erreur assistant optimis√©:`, {
                message: error.message,
                stack: error.stack?.split('\n').slice(0, 5),
                name: error.name,
                code: error.code
            });
            
            const errorResponse = {
                success: false,
                error: 'Erreur lors du traitement de la question',
                responseTime: Date.now() - startTime,
                service: 'optimized',
                debug: process.env.NODE_ENV === 'development' ? {
                    message: error.message,
                    stack: error.stack?.split('\n').slice(0, 5)
                } : undefined,
                timestamp: new Date()
            };

            console.log(`üì§ [${requestId}] Envoi de l'erreur au client:`, errorResponse);
            res.status(500).json(errorResponse);
        }
    }

    /**
     * V√©rification des patterns de questions fr√©quentes
     */
    checkFrequentPatterns(question) {
        const normalizedQuestion = question.toLowerCase().trim();
        
        for (const [key, config] of Object.entries(this.frequentPatterns)) {
            for (const pattern of config.patterns) {
                if (pattern.test(normalizedQuestion)) {
                    return {
                        response: config.response,
                        confidence: config.confidence,
                        pattern: key
                    };
                }
            }
        }
        
        return null;
    }

    /**
     * Statut avanc√© du service avec monitoring
     */
    async getServiceStatus(req, res) {
        try {
            const stats = this.qaService.getServiceStats();
            const systemInfo = {
                uptime: process.uptime(),
                memory: process.memoryUsage(),
                nodeVersion: process.version,
                timestamp: new Date()
            };

            const status = {
                service: 'OptimizedAssistantController',
                version: '2.0.0',
                status: stats.serviceStatus,
                performance: {
                    totalQuestions: stats.totalQuestions,
                    successRate: parseFloat(stats.successRate),
                    averageResponseTime: Math.round(stats.averageResponseTime),
                    cacheHitRate: parseFloat(stats.cacheHitRate),
                    errorRate: parseFloat(stats.errorRate)
                },
                approaches: {
                    rules: {
                        count: stats.rulesSuccess,
                        rate: parseFloat(stats.rulesSuccessRate)
                    },
                    embeddings: {
                        count: stats.embeddingsSuccess,
                        rate: parseFloat(stats.embeddingsSuccessRate)
                    },
                    cache: {
                        hits: stats.cacheHits,
                        rate: parseFloat(stats.cacheHitRate)
                    }
                },
                services: {
                    qa: {
                        initialized: this.qaService.isInitialized,
                        mode: stats.serviceMode,
                        lastResponse: stats.lastResponse
                    },
                    embeddings: stats.embeddingService,
                    vectorStore: stats.vectorStore
                },
                system: systemInfo
            };

            res.json({
                success: true,
                status: status,
                timestamp: new Date()
            });

        } catch (error) {
            console.error('Erreur statut service:', error);
            res.status(500).json({ 
                success: false,
                error: 'Erreur lors de la v√©rification du statut' 
            });
        }
    }

    /**
     * M√©triques d√©taill√©es pour le monitoring
     */
    async getMetrics(req, res) {
        try {
            const stats = this.qaService.getServiceStats();
            const cacheInfo = {
                frequent: {
                    keys: this.frequentResponsesCache.keys().length,
                    stats: this.frequentResponsesCache.getStats()
                },
                qa: stats.cacheStats
            };

            const metrics = {
                timestamp: new Date(),
                service: 'OptimizedAssistant',
                performance: {
                    requests: {
                        total: stats.totalQuestions,
                        successful: stats.rulesSuccess + stats.embeddingsSuccess,
                        failed: stats.failures,
                        cached: stats.cacheHits
                    },
                    timing: {
                        averageResponse: Math.round(stats.averageResponseTime),
                        lastResponse: stats.lastResponse
                    },
                    rates: {
                        success: parseFloat(stats.successRate),
                        error: parseFloat(stats.errorRate),
                        cache: parseFloat(stats.cacheHitRate)
                    }
                },
                distribution: {
                    byApproach: {
                        rules: stats.rulesSuccess,
                        embeddings: stats.embeddingsSuccess,
                        failures: stats.failures,
                        cached: stats.cacheHits
                    },
                    byService: {
                        primary: stats.serviceMode === 'primary' ? stats.totalQuestions : 0,
                        fallback: stats.serviceMode === 'fallback' ? stats.totalQuestions : 0
                    }
                },
                cache: cacheInfo,
                health: {
                    status: stats.serviceStatus,
                    initialized: this.qaService.isInitialized,
                    serviceMode: stats.serviceMode
                }
            };

            res.json({
                success: true,
                metrics: metrics
            });

        } catch (error) {
            console.error('Erreur m√©triques:', error);
            res.status(500).json({ 
                success: false,
                error: 'Erreur lors de la r√©cup√©ration des m√©triques' 
            });
        }
    }

    /**
     * Suggestions intelligentes bas√©es sur le contexte
     */
    async getSuggestions(req, res) {
        try {
            const userRole = req.user?.typeCompte === 'admin' ? 'admin' : 'enterprise';
            
            const suggestions = userRole === 'admin' 
                ? [
                    "Combien d'entreprises sont enregistr√©es ?",
                    "Quelles sont les statistiques du syst√®me ?",
                    "Comment analyser les performances globales ?",
                    "Quels sont les derniers KPIs syst√®me ?",
                    "Comment g√©rer les utilisateurs ?",
                    "Quelles sont les alertes actives ?"
                ]
                : [
                    "Comment am√©liorer ma rentabilit√© ?",
                    "Quels sont mes KPIs actuels ?",
                    "Comment motiver mon √©quipe ?",
                    "Comment optimiser mes co√ªts ?",
                    "Quels sont mes derniers rapports ?",
                    "Comment d√©velopper ma strat√©gie marketing ?"
                ];
            
            res.json({
                success: true,
                suggestions: suggestions,
                userRole: userRole,
                count: suggestions.length,
                timestamp: new Date()
            });

        } catch (error) {
            console.error('Erreur suggestions:', error);
            res.status(500).json({ 
                success: false,
                error: 'Erreur lors de la r√©cup√©ration des suggestions' 
            });
        }
    }

    /**
     * Rechargement de la base de connaissances
     */
    async reloadKnowledge(req, res) {
        try {
            // V√©rification de l'initialisation
            if (!this.isInitialized) {
                await this.initializeServices();
                if (!this.isInitialized) {
                    return res.status(503).json({ 
                        success: false,
                        error: 'Service assistant non disponible' 
                    });
                }
            }

            if (req.user?.typeCompte !== 'admin') {
                return res.status(403).json({ 
                    success: false,
                    error: 'Acc√®s administrateur requis' 
                });
            }

            console.log('üîÑ Rechargement demand√© par:', req.user.email);
            
            await this.qaService.loadKnowledgeBase();
            await this.qaService.generateAndIndexEmbeddings();
            
            res.json({
                success: true,
                message: 'Base de connaissances recharg√©e avec succ√®s',
                timestamp: new Date()
            });

        } catch (error) {
            console.error('Erreur rechargement:', error);
            res.status(500).json({ 
                success: false,
                error: 'Erreur lors du rechargement' 
            });
        }
    }

    /**
     * Test de sant√© du service
     */
    async healthCheck(req, res) {
        try {
            const isHealthy = this.qaService.isInitialized && 
                            this.qaService.metrics.serviceStatus !== 'error';
            
            const health = {
                status: isHealthy ? 'healthy' : 'unhealthy',
                service: 'OptimizedAssistant',
                initialized: this.qaService.isInitialized,
                serviceMode: this.qaService.useFallback ? 'fallback' : 'primary',
                uptime: process.uptime(),
                timestamp: new Date()
            };

            res.status(isHealthy ? 200 : 503).json({
                success: isHealthy,
                health: health
            });

        } catch (error) {
            res.status(503).json({
                success: false,
                health: {
                    status: 'error',
                    error: error.message,
                    timestamp: new Date()
                }
            });
        }
    }

    /**
     * Middleware pour l'upload de fichiers
     */
    uploadSingle() {
        return this.upload.single('file');
    }

    /**
     * Middleware pour l'upload multiple
     */
    uploadMultiple() {
        return this.upload.array('files', 5);
    }

    /**
     * Middleware de compression
     */
    compress() {
        return this.compressionMiddleware;
    }

    /**
     * Nettoyage des ressources
     */
    async cleanup() {
        this.frequentResponsesCache.flushAll();
        await this.qaService.cleanup();
    }
}

module.exports = OptimizedAssistantController;
